---
- name: Reuse common code
  include_tasks: "{{ playbook_dir }}/../common/config_apply.yml"

- name: Setup and initialize variables
  set_fact:
    current_host: "{{ hostvars[inventory_hostname].inter_name }}"
    clihost: ""
    fabricworkdir: "/opt/fabric/{{ env }}"

- name: Make sure remote working directory exists
  become: true
  become_user: root
  file:
    path: "{{ fabricworkdir }}/run"
    state: directory

- name: Get peer container list
  set_fact:
    peers: |
      {{ peers + [{'org':item.split('@')[1].split('.')[-1],
        'name':item.split('@')[1] | replace('.', '-'),
        'role':item.split('@')[0]}] }}
  with_items: "{{ fabric.network[current_host].peers | default([]) }}"

- name: Get ca container list
  set_fact:
    cas: |
      {{ cas + [{'org':item.split('.')[-1],
        'name':item | replace('.', '-') }] }}
  with_items: "{{ fabric.network[current_host].cas | default([]) }}"

- name: Get orderer container list
  set_fact:
    orderers: |
      {{ orderers + [{'org':item.split('.')[-1],
        'name':item | replace('.', '-') }] }}
  with_items: "{{ fabric.network[current_host].orderers | default([]) }}"

- name: Set zookeeper and kafka container list
  set_fact:
    zookeepers: "{{ fabric.network[current_host].zookeepers | default([]) }}"
    kafkas: "{{ fabric.network[current_host].kafkas | default([]) }}"

- name: Pull certificates from the controller
  copy:
    src: "{{ pjroot }}/vars/{{ env }}/fabric/certs.tgz"
    dest: "{{ fabricworkdir }}/allcerts.tgz"

- name: Unpack the certificates
  unarchive:
    src: "{{ fabricworkdir }}/allcerts.tgz"
    dest: "{{ fabricworkdir }}/run"
    remote_src: true

- name: Process private key files
  template:
    src: "{{ playbook_dir }}/../deploy_compose/certsetup/templates/fabric-ca-server-config.j2"
    dest: "{{ fabricworkdir }}/run/keyfiles/{{ item.org }}/ca/fabric-ca-server-config.yaml"
  with_items: "{{ cas }}"

- name: Get the peer org list
  set_fact:
    peerorgs: "{{ peers | map(attribute='org') | list  | unique | sort }}"

- name: Create peer org member string
  set_fact:
    orgmembers: >-
      {{ peerorgs|map('regex_replace','(.*)',"'\g<1>.member'")|list|join(',') }}

- name: Login to docker repo
  command: "docker login {{ fabric.repo.url }} -u {{ fabric.repo.username }} -p {{ fabric.repo.password }}"
  when: >
    fabric.baseimage_tag | length > 0 and
    fabric.repo.username | default("") | length > 0 and
    fabric.repo.password | default("") | length > 0

- name: Pull necessary container images from the docker hub
  command: "docker pull {{ fabric.repo.url }}{{ item.name }}"
  when: item.flag | length > 0 and fabric.baseimage_tag | length > 0
  delay: 5
  with_items:
    - { name: "fabric-ca:{{ fabric.ca.image_tag | default(fabric.baseimage_tag) }}", flag: "{{ cas }}" }
    - { name: "fabric-zookeeper:{{ fabric.helper_tag }}", flag: "{{ zookeepers }}" }
    - { name: "fabric-kafka:{{ fabric.helper_tag }}", flag: "{{ kafkas }}" }
    - { name: "fabric-couchdb:{{ fabric.helper_tag }}", flag: "{{ peers }}" }
    - { name: "fabric-orderer:{{ fabric.baseimage_tag }}", flag: "{{ orderers }}" }
    - { name: "fabric-peer:{{ fabric.baseimage_tag }}", flag: "{{ peers }}" }
    - { name: "fabric-ccenv:{{ fabric.baseimage_tag }}", flag: "{{ peers }}" }
    - { name: "fabric-tools:{{ fabric.baseimage_tag }}", flag: "tools" }
  tags: "pullimages"

- name: Create docker compose files
  template:
    src: "{{ playbook_dir }}/fabricsetup/templates/{{ item.name }}.j2"
    dest: "{{ fabricworkdir }}/run/{{ item.name }}.yml"
  when: item.flag | length > 0
  with_items:
    - { name: "ca-compose", flag: "{{ cas }}" }
    - { name: "zookeeper-compose", flag: "{{ zookeepers }}" }
    - { name: "kafka-compose", flag: "{{ kafkas }}" }
    - { name: "orderer-compose", flag: "{{ orderers }}" }
    - { name: "peer-compose", flag: "{{ peers }}" }

- name: Start fabric components
  shell: >-
    docker-compose -p {{ env }}.{{ item.name }}
    -f {{ fabricworkdir }}/run/{{ item.name }}.yml up -d && sleep 5
  when: item.flag | length > 0
  with_items:
    - { name: "zookeeper-compose", flag: "{{ zookeepers }}" }
    - { name: "kafka-compose", flag: "{{ kafkas }}" }
    - { name: "orderer-compose", flag: "{{ orderers }}" }
    - { name: "peer-compose", flag: "{{ peers }}" }
    - { name: "ca-compose", flag: "{{ cas }}" }
  tags: "fabricup"
