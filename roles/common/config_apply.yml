---
- name: Setup and initialize variables
  set_fact:
    fabricworkdir: "{{ pjroot }}/vars/{{ env }}/fabric"
    fabricpath: "{{ pjroot }}/vars/{{ env }}"
    pjrun: "{{ pjroot }}/vars/{{ env }}/run"
    peers: "{{ [] }}"
    orderers: "{{ [] }}"
    cas: "{{ [] }}"
    kafkas: "{{ [] }}"
    zookeepers: "{{ [] }}"
    znodes: ""
    zkparam: ""
    index: 1
    zoo_ids: "{{ {} }}"
    kafka_ids: "{{ {} }}"
    zookeeperls: "{{ [] }}"
    kafkals: "{{ [] }}"
    peerls: "{{ [] }}"
    ordererls: "{{ [] }}"
    cals: "{{ [] }}"
    allpeers: "{{ [] }}"
    allcas: "{{ [] }}"
    allorderers: "{{ [] }}"
    clipeer: "{}"
    cliorderer: "{}"
    tls: "{}"
    mutualtls: "{}"

- name: Make sure that working directory exists
  file:
    path: "{{ pjrun }}"
    state: "directory"
    mode: 0775
  #remote_user: "{{ cluster.ssh_user }}"
  become: yes
  become_user: ubuntu
  become_method: sudo
  vars:
    ansible_ssh_private_key_file: "/home/ubuntu/.ssh/fd"


- name: Create component list
  set_fact:
    cals: "{{ cals | default([]) + item.value.cas | default([]) }}"
    ordererls: "{{ ordererls | default([]) + item.value.orderers | default([]) }}"
    peerls: "{{ peerls | default([]) + item.value.peers | default([]) }}"
    zookeeperls: "{{ zookeeperls | default([]) + item.value.zookeepers | default([]) }}"
    kafkals: "{{ kafkals | default([]) + item.value.kafkas | default([]) }}"
  with_dict: "{{ fabric.network }}"

- name: Sort component list
  set_fact:
    zookeeperls: "{{ zookeeperls | sort }}"
    kafkals: "{{ kafkals | sort }}"

- name: Generate zookeeper node list
  set_fact:
    znodes: "{{ znodes }} server.{{ index }}={{ item }}:2888:3888"
    zkparam: "{{ zkparam + item }}:2181 "
    zoo_ids: "{{ zoo_ids | combine({item: index}) }}"
    index: "{{ index | int + 1 }}"
  with_items: "{{ zookeeperls | default([]) }}"

- name: Reset the index
  set_fact:
    index: 1

- name: Generate kafka broker ids
  set_fact:
    kafka_ids: "{{ kafka_ids | combine({item: index}) }}"
    index: "{{ index | int + 1 }}"
  with_items: "{{ kafkals | default([]) }}"

- name: Get all ca object list
  set_fact:
    allcas: |
      {{ allcas | default([]) + [{ 'org':item.split('.')[-1],
        'name':item | replace('.', '-') }] }}
  with_items: "{{ cals }}"

- name: Get all peer object list
  set_fact:
    allpeers: |
      {{ allpeers | default([]) + [{'org':item.split('@')[1].split('.')[-1],
        'name':item.split('@')[1] | replace('.', '-'),
        'role':item.split('@')[0]}] }}
  with_items: "{{ peerls }}"

- name: Get all orderer object list
  set_fact:
    allorderers: |
      {{ allorderers | default([]) + [{ 'org':item.split('.')[-1],
        'name':item | replace('.', '-') }] }}
  with_items: "{{ ordererls }}"

- name: Find all anchor peers
  set_fact:
    anchor_peers: "{{ allpeers | selectattr('role', 'equalto', 'anchor') | list }}"
  when: allpeers is defined and (allpeers | length > 0)

- name: Create org anchor peer hash
  set_fact:
    org_anchor: "{{ org_anchor | default({}) | combine( { item.org: item } ) }}"
  with_items: "{{ anchor_peers }}"
  when: anchor_peers is defined and (anchor_peers | length > 0)

- name: Select a peer to run channel and chaincode command
  set_fact:
    clipeer: "{{ allpeers | random }}"
  when: allpeers | default([]) | length > 0

- name: Select an orderer to run channel and chaincode command
  set_fact:
    cliorderer: "{{ allorderers | random }}"
  when: allorderers | default([]) | length > 0

- name: Get ca, peer and orderer orgs
  set_fact:
    caorgs: "{{ allcas | default([]) | map(attribute='org') | list  | unique | sort }}"
    peerorgs: "{{ allpeers | default([]) | map(attribute='org') | list  | unique | sort }}"
    ordererorgs: "{{ allorderers | default([]) | map(attribute='org') | list  | unique | sort }}"

- name: Create all orgs list
  set_fact:
    allorgs: "{{ (caorgs + peerorgs + ordererorgs) | sort | unique }}"

- name: TLS
  set_fact:
    tls: "{{ fabric.tls | default('true') }}"
    mutualtls: "false"
  when: fabric.tls != "client"

- name: Mutual tls
  set_fact:
    mutualtls: "true"
    tls: "true"
  when: fabric.tls == "client"

- name: Create peerorg rootca list
  set_fact:
    peerorg_rootca: |
      {{ peerorg_rootca | default([]) | replace('+', ',') }}  +  [ '/etc/hyperledger/fabric/artifacts/keyfiles/{{ item }}/ca/ca.{{ item }}-cert.pem' ]
  with_items: "{{ peerorgs }}"
  when: fabric.tls == "client"

- name: Create peers rootca list
  set_fact:
    peers_rootca: |
      {{ peers_rootca | default([]) | replace('+', ',') }}  +  [ '/etc/hyperledger/fabric/artifacts/keyfiles/{{ item.org }}/peers/{{ item.name }}.{{ item.org }}/tls/ca.crt' ]
  with_items: "{{ allpeers }}"
  when: fabric.tls == "client"

- name: Create orderers rootca list
  set_fact:
    orderer_rootca: |
      {{ orderer_rootca | default([]) | replace('+', ',') }} + [ '/etc/hyperledger/fabric/artifacts/keyfiles/{{ item.org }}/orderers/{{ item.name }}.{{ item.org }}/tls/ca.crt' ]
  with_items: "{{ allorderers }}"
  when: fabric.tls == "client"

- name: Joining the orderer rootca list and peerorg rootca list
  set_fact:
    rootca: "{{ peerorg_rootca }} + {{ peers_rootca }} + {{ orderer_rootca }}"
  when: fabric.tls == "client"
